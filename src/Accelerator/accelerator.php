<?php

// disabled
return ;

/**
 * Clickio Accelerator
 *
 * @link              https://clickio.com
 * @package           Clickio Accelerator
 *
 * @wordpress-plugin
 * Plugin Name:       Clickio Accelerator
 * Description:       This is automatically generated by the Clickio Prism Plugin to increase performance. It is automatically disabled when disabling the main plugin.
 * Version:           0.1
 * Author:            Clickio
 * Author URI:        https://clickio.com
 * License:           GPL-2.0+
 * License URI:       http://www.gnu.org/licenses/gpl-2.0.txt
 * Text Domain:       clickioprism
 * Domain Path:       /languages
 */


require_once dirname(__FILE__)."/../../vendor/autoload.php";

define('CLICKIO_ACCELERATOR_VERSION', '0.1');

use Clickio\Options;
use Clickio\Prism\Cache\CacheManager;
use Clickio\Prism\Cache\CacheRepo;
use Clickio\Utils\SafeAccess;

$get_id = SafeAccess::fromArray($_REQUEST, 'get_id', 'string', '');
$lx_nocache = SafeAccess::fromArray($_REQUEST, 'lx_nocache', 'string', '');
$lx_force_nocache = SafeAccess::fromArray($_REQUEST, 'lx_force_nocache', 'string', '');
$lx_debug = SafeAccess::fromArray($_REQUEST, 'lx_debug', 'string', '');

$url = SafeAccess::fromArray($_SERVER, 'REQUEST_URI', 'string', '');

$is_blacklisted = clickioIsBlacklisted($url);
$is_auth = clickioIsAuthenticated();
$is_static = clickioIsStaticFile($url);

$cache_opt = Options::get('cache');
$integration_opt = Options::get('integration_scheme');

$method = SafeAccess::fromArray($_SERVER, 'REQUEST_METHOD', 'string', 'POST');
$cache_plugins = clickioHasThirdpartyCache();

if (!empty($lx_force_nocache)) {
    $parsed = wp_parse_url($url);
    $query = SafeAccess::fromArray($parsed, 'query', 'string', '');
    $path = SafeAccess::fromArray($parsed, 'path', 'string', '');
    $query_list = explode("&", $query);
    $filtered_list = array_filter(
        $query_list,
        function ($item) {
            if (!preg_match("/^lx_force_nocache/", $item)) {
                return $item;
            }
        }
    );
    $filtered_query = implode("&", $filtered_list);
    if (empty($filtered_query)) {
        $url = $path;
    } else {
        $url = implode("?", [$path, $filtered_query]);
    }

    $repo = CacheRepo::getInstance();
    $repo->purge($url);
}

if (!is_admin()
    && empty($get_id)
    && empty($is_blacklisted)
    && empty($is_auth)
    && !empty($cache_opt)
    && $method == 'GET'
    && $integration_opt == 'cms'
    && empty($lx_nocache)
    && empty($lx_force_nocache)
    && empty($cache_plugins)
    && empty($lx_debug)
    && empty($is_static)
) {
    $repo = CacheRepo::getInstance();
    $cache = $repo->get($url);
    if (!empty($cache)) {
        CacheManager::setCacheStatusHeader(true);
        echo $cache;
        exit(0);
    } else {
        ob_start([CacheManager::class, 'cacheOutputBuffer']);
        CacheManager::setCacheStatusHeader(false);
    }
} else {
    CacheManager::setCacheStatusHeader(false);
}

function clickioIsAuthenticated()
{
    foreach ($_COOKIE as $key => $value) {
        $cookie_name = preg_match("/wordpress_logged_in/", $key);
        if ($cookie_name) {
            return true;
        }
    }
    return false;
}

function clickioHasThirdpartyCache()
{
    $plugins = [
        "litespeed-cache/litespeed-cache.php",
        "w3-total-cache/w3-total-cache.php",
        "wp-fastest-cache/wpFastestCache.php",
        "wp-optimize/wp-optimize.php",
        "cache-enabler/cache-enabler.php",
        "hummingbird-performance/wp-hummingbird.php",
        "wp-super-cache/wp-cache.php",
        "autoptimize/autoptimize.php",
        "sg-cachepress/sg-cachepress.php"
    ];

    $active_plugins = get_option('active_plugins');

    foreach ($plugins as $plugin) {
        if (in_array($plugin, $active_plugins)) {
            return true;
        }
    }
    return false;
}

/**
 * Url is blacklisted
 *
 * @param string $url current url
 *
 * @return bool
 */
function clickioIsBlacklisted(string $url): bool
{
    $url_blacklist_patterns = [
        "wp-json",
        "wp-admin",
        "wp-login",
        "login",
        "register",
        "forgot-password",
    ];

    foreach ($url_blacklist_patterns as $pattern) {
        if (preg_match("/".$pattern."/", $url)) {
            return true;
        }
    }
    return false;
}

function clickioIsStaticFile(string $url)
{
    $static_ext_list = [
        "js",
        "css",
        "xml",
        "map"
    ];
    foreach ($static_ext_list as $ext) {
        if (preg_match("/\.".$ext."$/", $url)) {
            return true;
        }
    }
    return false;
}